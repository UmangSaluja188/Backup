/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication;

import java.awt.MenuItem;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.lang.Thread;
import java.rmi.ServerException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author K Kaul
 */

class Example extends Thread
{
    final static Socket[] tClient=new Socket[10];
    DataInputStream di1,di2;
    DataOutputStream do1,do2;
    final Socket rec;
    static int j;
    static int i=0;
    Example(Socket s1,Socket s2,DataInputStream di1,DataOutputStream do1,DataInputStream di2,DataOutputStream do2,int j )
    {
        Example.tClient[i]=s1;
        this.rec=s2;
        this.di1=di1;
        this.do1=do1;
        this.di2=di2;
        this.do2=do2;
        this.j=j;
        i++;
    }
   
    Example(Socket s1,DataInputStream di1,DataOutputStream do1,int j )
    {
        this.rec=null;
        this.tClient[i]=s1;
        this.di1=di1;
        this.do1=do1;     
        this.di2=null;
        this.do2=null;
        this.j=j;
        i++;
    }
    @Override
    public void run()
    {
        String str="";
        int start=0,index=0;
        if(rec==null)
        {
        while(true)
        {
            try {
                if(start==0)
                {
                    str=di1.readUTF();
                    index=Integer.parseInt(str);
                    start++;
                    System.out.println("\nStart1 "+str+j);
                }
                else
                {
                    str=di1.readUTF();
                    do2=new DataOutputStream(tClient[index].getOutputStream());
                    do2.writeUTF(str);
                    do2.flush();
                    System.out.println("\nStartmkk"+tClient[index].getLocalSocketAddress());
                }
                
                System.out.println(str);
            } catch (IOException ex) {
                Logger.getLogger(Example.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        }
        else
        {
           while(true)
        {
            try {
                str=di1.readUTF();
                do2.writeUTF(str);
                System.out.println("Hello"+tClient[j].getLocalSocketAddress());
            } catch (IOException ex) {
                Logger.getLogger(Example.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } 
        }
    }
    
}

public class ServerSide extends  javax.swing.JFrame { 
   
    static Socket[] s=new Socket[10];
    /**
     * Creates new form ServerSide
     */ 
    public ServerSide() {
              Scanner ss=new Scanner(System.in);
           initComponents();
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        connection = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connection.setBackground(new java.awt.Color(204, 102, 255));
        connection.setColumns(20);
        connection.setEditable(false);
        connection.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        connection.setForeground(new java.awt.Color(255, 255, 255));
        connection.setRows(5);
        jScrollPane2.setViewportView(connection);

        jLabel1.setBackground(new java.awt.Color(0, 0, 204));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("    Server Side");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       Scanner s3=new Scanner(System.in);
        int i=0;
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ServerSide().setVisible(true);
                
                        
                        
            }
       
        });
        ServerSocket sc;
          DataInputStream di2=null;
          DataOutputStream do2=null;
        int j=0;
        String str,ip;
        try {
            
               sc=new ServerSocket(6667);
               while(true)
               {
                   
                    s[j]=sc.accept(); 
              connection.setText(connection.getText()+"\n"+"Clenit "+(j+1)+" "+s[j].getRemoteSocketAddress()+"Connected");
                    System.out.println("Accept");
              DataInputStream di=new DataInputStream(s[j].getInputStream());
              DataOutputStream do1=new DataOutputStream(s[j].getOutputStream());
             int p1=0;
             do1.writeUTF(""+j);
             do1.flush();
             while(p1<j)
              {
                  do1.writeUTF(""+s[p1].getRemoteSocketAddress());
                  do1.flush();
                  p1++;
                  
              }
         
              
              ip=di.readUTF().toString();
              int k=0,index=0,match=0,newValue = 0;
              
              while(k<j)
              {
                  if(ip.equals(s[k].getRemoteSocketAddress().toString().trim()))
                  {
                     match=1;
                     di2=new DataInputStream(s[k].getInputStream());
                     do2=new DataOutputStream(s[k].getOutputStream());
                     connection.setText(connection.getText()+"\n"+s[j].getRemoteSocketAddress()+" Connected with "+s[k].getRemoteSocketAddress());
                     do2.writeUTF(""+j);
                     
                     do1.writeUTF("You are connected with "+s[k].getRemoteSocketAddress());
                    newValue=k;
                    
                    break;
                  
                  }
                  k++;
                  
              }
              int connectedClient=0;
              
              Thread ex[]=new Thread[100];
              int p=0;
              if(match>0)
              {
                    
                    ex[p]=new Example(s[j],s[k],di,do1,di2,do2,newValue);
                    System.out.println("Index Greater Than 0"+j);
                    
                    ex[p].start();
              }
              else
              {
                  ex[p]=new Example(s[j],di,do1,newValue);
                  ex[p].start();
                  do1.writeUTF("Connection not established ");
              }
              j++;
              System.out.println("Start");
        }
          
       
        }
       catch(IOException e)  
       {    
           System.out.println(e.getMessage());
       }
        
        
        
      
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea connection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
